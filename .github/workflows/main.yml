name: CI_CD WORKFOLWS

env:
  SERVER_USER: "root"
  SERVER_STAGING: "78.138.45.88"
  SERVER_PRODUCTION: "162.19.228.83"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - main

jobs:

  test-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: CheCkout
        uses: actions/checkout@v4
      - name: Install node
        uses: actions/setup-node@v3
        with:
          cache: 'npm'
          cache-dependency-path: ./frontend/package-lock.json
      - name: Install dependencies
        run: npm ci --prefer-offline
      - name: run lint
        run: npm run lint
      - name: npm audit
        run: npm audit --audit-level=moderate

  test-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./node-api

    steps:
      - name: CheCkout
        uses: actions/checkout@v4
      - name: Install node
        uses: actions/setup-node@v3
        with:
          cache: 'npm'
          cache-dependency-path: ./node-api/package-lock.json
      - name: Install dependencies
        run: npm ci --prefer-offline
      - name: run lint
        run: npm run lint
      - name: npm audit
        run: npm audit --audit-level=moderate
      - name: exec unit tests
        run: npm run test:ci
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}


  build-frontend-and-node-api:
    needs: [test-frontend,test-backend ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - context_name: ./frontend
            image_name: ghcr.io/nalvac/ci-cd-docker/frontend/app:latest
          - context_name: ./node-api
            image_name: ghcr.io/nalvac/ci-cd-docker/node-api/app:latest
    permissions:
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: $ {{matrix.image_name}}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context_name }}
          push: true
          tags: ${{ matrix.image_name }}
          cache-on: type=gha # Cache pour le gitHub action
          cache-from: type=gha,mode=max # Cache tout, mm les layers intermédiare

  e2e:
    needs: [ build-frontend-and-node-api ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Lancement des tests E2E
        run: docker compose up --exit-code-from cypress --abort-on-container-exit
      - name: Nettoyage
        run: docker compose down -v --remove-orphans

  deploy_production:
    needs: [ e2e ]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: http://${{ env.SERVER_PRODUCTION }}
    steps:
      - name: checkout le code
        uses: actions/checkout@v4

      - name: déployer sur le serveur de production
        run: |
          eval $(ssh-agent -s)
          ssh-add - <<< "${{ secrets.OVH_PROD_PKEY }}"
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ env.SERVER_PRODUCTION }} >> ~/.ssh/known_hosts
          scp -r docker-compose.prod.yml ${{ env.SERVER_USER }}@${{ env.SERVER_PRODUCTION }}:/root/docker-compose.prod.yml
          ssh ${{ env.SERVER_USER }}@${{ env.SERVER_PRODUCTION }} "docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }} &&
            docker compose -f /root/docker-compose.prod.yml up -d --force-recreate"